#!/bin/bash
#USAGE:
#Set SCR_PKG, SCR_BUILD, and SCR_INSTALL to fit your system
#Run with output sent to the first command line argument
if [ $# -ne 1 ]; then echo "This script takes one argument: the path to the output file"; exit 1; fi

# set SCR_PKG to the directory where SCR is cloned
# set SCR_BUILD to the directory where SCR should be untarred and built (this will be removed with rm -rf)
# set SCR_INSTALL to the directory where SCR is installed
if [ -z "$SCR_PKG" ]; then export SCR_PKG="/g/g0/becker33/scr_port/usr/projects/SCR/scr-1.1-8.cray.dev/source/working"; fi
if [ -z "$SCR_BUILD" ]; then export SCR_BUILD="/g/g0/becker33/scr_port/usr/projects/SCR/scr-1.1-8.cray.dev/source/working-dist"; fi
#if [ -z "$SCR_BUILD" ]; then export SCR_BUILD="/usr/projects/SCR/TR-installs/scr_dw_with_source"; fi
if [ -z "$SCR_INSTALL" ]; then export SCR_INSTALL="${SCR_BUILD}/install"; fi
#if [ -z "$SCR_INSTALL" ]; then export SCR_INSTALL="/usr/projects/SCR/TR-installs/scr_dw_with_source/install"; fi
if [ -z "$SCR_LAUNCH_DIR" ]; then export SCR_LAUNCH_DIR="/p/lscratchd/becker33"; fi

# commands to debug various items
#export TV=/usr/global/tools/totalview/v/totalview.8X.9.9-1/bin/totalview
#export TV=/usr/global/tools/totalview/v/totalview.8X.8.0-4/bin/totalview
#export TV=totalview

# To use SCR_PRESERVE_USER_DIRS features, you'll need DTCMP, which in turn needs LWGRP
# NOTE: one must use MPI-2.2 or newer to compile LWGRP and DTCMP
# e.g., use mvapich2-2.0 or openmpi-1.8.4 or later
# fetch and build dependencies (LWGRP and DTCMP)
#${SCR_PKG}/buildme_deps

# various CFLAGS for different builds
# build the dist tarball
#export CFLAGS="-g -O3 -Wall -Werror -DHIDE_TV"
#export CFLAGS="-g -O3 -Wall -DHIDE_TV"
#export CFLAGS="-g -O0 -Wall"

# BGQ build instructions
#export CFLAGS="-g -O0 -Wall -Werror -DHIDE_TV -I/bgsys/drivers/V1R1M2/ppc64/comm/sys/include -I/bgsys/drivers/V1R1M2/ppc64 -I/bgsys/drivers/V1R1M2/ppc64/spi/include -I/bgsys/drivers/V1R1M2/ppc64/spi/include/kernel/cnk -I/bg#sys/drivers/V1R1M2/ppc64/comm/xl/include"
#export configopts="--with-machine-name=BGQ --with-scr-config-file=${HOME}/system_scr.conf --with-scr-cache-base=/dev/persist --with-scr-cntl-base=/dev/persist --with-file-lock=none"
#export scrversion="scr-1.1-8"
#cd ${SCR_PKG}
#make distclean
#./autogen.sh
#./configure --prefix=/usr/local/tools/scr-1.1 $configopts
#make dist

echo "_____________________________________________________________________"

# Linux build instructions
#export CFLAGS="-g -O0 -Wall -Werror -DHIDE_TV"
#export configopts="--with-scr-config-file=/etc/scr.conf --with-yogrt --with-mysql --with-dtcmp=./deps/install"
export CFLAGS="-O3 -fPIC "
#export configopts="--with-machine-name=cray_xt --without-yogrt --with-moab=/opt/MOAB/default --with-file-lock=fnctl CC=cc MPICC=cc --with-scr-cache-base=/tmp/scratch --with-scr-cntl-base=/tmp/scratch --with-scr-config-file=/usr/projects/SCR/installs/mercury.conf --with-pdsh=/usr/projects/SCR/pdsh-2.26-install/bin"
#export configopts="--with-machine-name=cray_xt --without-yogrt --with-moab=/opt/MOAB/default --with-file-lock=fnctl CC=cc MPICC=cc --with-scr-cache-base=/tmp/scratch --with-scr-cntl-base=/tmp/scratch --with-scr-config-file=/usr/projects/SCR/scr-1.1-8.cray.dev/source/working/scr.conf --with-pdsh=/usr/projects/SCR/pdsh-2.26-install/bin"
export configopts="--with-machine-name=TLCC --without-yogrt --with-moab=/opt/MOAB/default --with-file-lock=fnctl CC=gcc MPICC=mpicc --with-scr-cache-base=/tmp --with-scr-cntl-base=/tmp --with-scr-config-file=/g/g0/becker33/scr_port/usr/projects/SCR/scr-1.1-8.cray.dev/source/working/scr.conf --with-pdsh=/usr/bin/pdsh"
#export configopts="--with-scr-config-file=/etc/scr.conf --with-yogrt --with-mysql"
echo $configopts
./configure --prefix=/g/g0/becker33/scr_port/usr/projects/SCR/scr-1.1-8.cray.dev/source/working $configopts
#./configure --prefix=/usr/projects/SCR/TR-installs/scr_dw_with_source $configopts
export scrversion="scr-1.1.8"
cd ${SCR_PKG}
make distclean
./autogen.sh
./configure $configopts
make dist

echo "_____________________________________________________________________"

# check that a direct build works
#make

echo "_____________________________________________________________________"

# unzip the dist tarball, configure, make, make install
rm -rf ${SCR_BUILD}
mkdir ${SCR_BUILD}
mv ${scrversion}.tar.gz ${SCR_BUILD}/.
cd ${SCR_BUILD}
tar -zxf ${scrversion}.tar.gz
cd ${scrversion}
./configure --prefix=${SCR_INSTALL} $configopts
make VERBOSE=1 -j4
make install

echo "_____________________________________________________________________"
echo "_____________________________________________________________________"
echo "_____________________________________________________________________"

# cd to examples directory, and check that build of test programs works
cd ${SCR_INSTALL}/share/scr/examples
export OPT="-g -O0"
export CFLAGS="-g -O0"
make VERBOSE=1
cp ${SCR_PKG}/scr.user.conf .scrconf

echo "_____________________________________________________________________"

#mpicc -g -O0 -I${SCR_INSTALL}/include -I. -o test_api test_common.c test_api.c -L${SCR_INSTALL}/lib -lscr -L/usr/local/tools/zlib-1.2.6/lib -lz

echo "_____________________________________________________________________"

# run the TEST
# must be run on a machine with python in the same location as on the target machine
#sed -i 's|^#!.*$|#!'`which python`'|' ${SCR_PKG}/testing/TEST
#cp .scrconf ${SCR_LAUNCH_DIR}/.
cd ${SCR_LAUNCH_DIR}
msub -V -l nodes=4 -m be -j oe -o $1 ${SCR_PKG}/testing/TEST
echo "Submitted a batch job to run TEST on 4 nodes with output sent to $1."
echo "You should shortly receive an email notifying you that the batch job has been submitted."
echo " You will receive another when it is completed"
echo "In the meantime you can monitor the output using \"tail -f $1\""

#sleep 20

#echo ""
#env | grep "[Jj][Oo][Bb]"
#echo ${SCR_INSTALL}/bin/scr_env --jobid
