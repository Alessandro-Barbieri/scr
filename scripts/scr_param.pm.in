package scr_param;
use strict;

# reads in an SCR hash file and translates it
# into a perl hash object

my $config_file = "@SCR_CONFIG_FILE@";

sub new
{
  my $type = shift;

  my $self = {};

  $self->{prog} = 'scr_param';
  $self->{file} = undef;
  $self->{config} = undef;

  read_config_file($self, $config_file);

  return bless $self, $type;
}

sub read_config_file
{
  my $self = shift @_;
  my $file = shift @_;

  $self->{file} = $file;
  $self->{config} = {};

  if (-r $file) {
    if (open(IN, $file)) {
      while (my $line = <IN>) {
        chomp $line;
        $line =~ s/^\s*//g; # strip any leading whitespace from line
        $line =~ s/\s*$//g; # strip any trailing whitespace from line
        $line =~ s/=/ /g;   # replace '=' with spaces
        my @parts = split(/\s+/, $line);
        my $master_key   = undef;
        my $master_value = undef;
        while (@parts > 0) {
          my $part = shift @parts;
          if ($part =~ /^#/) {
            @parts = ();
          } else {
            # convert the key to upper case
            my $key = uc($part);

            # read in the value (should have at least one more item in the list)
            if (@parts == 0) {
              print "$self->{prog}: ERROR: Invalid key=value pair detected in $file.\n";
              exit 1;
            }
            my $value = shift @parts;

            # record the key value pair in the hash
            if (defined $master_key) {
              push @{$self->{config}{$master_key}{subkey}{$master_value}{$key}{value}}, $value;
            } else {
              $master_key   = $key;
              $master_value = $value;
              push @{$self->{config}{$master_key}{value}}, $value;
            }
          }
        }
      }
    }

    # done reading, close the file
    close(IN);
  } else {
    print "$self->{prog}: ERROR: Could not open file: $self->{file}\n";
  }

  return;
}

sub get_param
{
  my $self = shift;
  my $name = shift;
  my $subname = undef;
  if (@_ > 0) { $subname = shift; }

  # if param is set in environment, return that value
  if (defined $ENV{$name}) {
    return $ENV{$name};
  }

  # otherwise, check whether we have it defined in our config file
  if (defined $self->{config}{$name}) {
    my $first = (@{$self->{config}{$name}{value}})[0];
    return $first;
  }

  return undef;
}

sub get_subparam
{
  my $self    = shift;
  my $name    = shift;
  my $value   = shift;
  my $subname = shift;

  # otherwise, check whether we have it defined in our config file
  if (defined $self->{config}{$name} and
      defined $self->{config}{$name}{subkey} and
      defined $self->{config}{$name}{subkey}{$value} and
      defined $self->{config}{$name}{subkey}{$value}{$subname})
  {
    my $first = (@{$self->{config}{$name}{subkey}{$value}{$subname}{value}})[0];
    return $first;
  }

  return undef;
}

1;
