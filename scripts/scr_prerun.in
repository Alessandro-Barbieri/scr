#!/bin/bash

# Run this script before the job runs to clear
# the checkpoint cache in case a previous run
# left something.

# requires: pdsh

# if SCR is disabled, immediately exit
if [ "$SCR_ENABLE" == "0" ] ; then
  exit 0
fi

# turn on verbosity
if [ -n "$SCR_DEBUG" ]; then
  if [ $SCR_DEBUG -gt 0 ] ; then
    set -x
  fi
fi

# record the start time of the script
start_time=`date`
start_secs=`date +%s`

bindir="@X_BINDIR@"

pdsh="@PDSH_EXE@"
rm="/bin/rm"
mkdir="/bin/mkdir"

prog="scr_prerun"

print_usage() { echo "Usage: $prog [-p prefix_dir]"; exit 1; }

# process command line options
PARDIR=${SCR_PREFIX:-`pwd`}
OPTIND=1
while getopts "f:t:p:c:" flag ; do
  case $flag in
    p) PARDIR=$OPTARG;;
    *) print_usage;;
  esac
done

# check that we have the parallel file system prefix directory
if [ "$PARDIR" == "" ] ; then
  print_usage
fi

# all parameters checked out, start normal output
echo "$prog: Started: $start_time"

# get our nodeset for this job
if [ -z "$SCR_NODELIST" ] ; then
  nodelist_env=`$bindir/scr_env --nodes`
  if [ $? -eq 0 ] ; then
    SCR_NODELIST=$nodelist_env
  fi
fi
if [ -z "$SCR_NODELIST" ] ; then
  echo "$prog: ERROR: Could not identify nodeset"
  exit 1
fi
export SCR_NODELIST

# identify nodes in our allocation and the set that are still up
UPNODES=$SCR_NODELIST

# fire off a command on the remaining nodes
ret=0
if [ $UPNODES != "" ]; then
  # clean control and cache directories
  cntldir=`$bindir/scr_cntl_dir`
  cachedir=`$bindir/scr_cntl_dir --cache`
  dir_list="$cntldir $cachedir"
  echo "$prog: Clearing SCR directories: $cntldir $cachedir"
  $pdsh -w "$UPNODES" "$rm -rf $dir_list; $mkdir -p $dir_list"
  # TODO: want to process return code here to return an error?
fi

# report timing info
end_time=`date`
end_secs=`date +%s`
run_secs=$(($end_secs - $start_secs))
echo "$prog: Ended: $end_time"
echo "$prog: secs: $run_secs"

# report exit code and exit
echo "$prog: exit code: $ret"
exit $ret
